/*
 * File: NameSurferGraph.java
 * ---------------------------
 * This class represents the canvas on which the graph of
 * names is drawn. This class is responsible for updating
 * (redrawing) the graphs whenever the list of entries changes or the window is resized.
 */

import acm.graphics.*;
import acm.util.RandomGenerator;

import java.awt.event.*;
import java.util.*;
import java.awt.*;

public class NameSurferGraph extends GCanvas
	implements NameSurferConstants, ComponentListener {

	/**
	* Creates a new NameSurferGraph object that displays the data.
	*/
	public NameSurferGraph() {
		addComponentListener(this);
		update();
	}
	
	/**
	* Clears the list of name surfer entries stored inside this class.
	*/
	public void clear() {
		//	 You fill this in //
		// clears the arraylist of names
		entries.clear();
		update();
		
		// debug
		System.out.println("entries cleared and updated");
		System.out.println(entries.size());
	}
	
	/* Method: addEntry(entry) */
	/**
	* Adds a new NameSurferEntry to the list of entries on the display.
	* Note that this method does not actually draw the graph, but
	* simply stores the entry; the graph is drawn by calling update.
	*/
	public void addEntry(NameSurferEntry entry) {
		// You fill this in //
		entries.add(entry);
		update();
	}
	
	
	
	/**
	* Updates the display image by deleting all the graphical objects
	* from the canvas and then reassembling the display according to
	* the list of entries. Your application must call update after
	* calling either clear or addEntry; update is also called whenever
	* the size of the canvas changes.
	*/
	public void update() {
		drawBG();
		drawEntries();
	}
	
	// draws the background
	private void drawBG() {
		
		// draw horizontal lines at top and bottom
		add(new GLine(0,GRAPH_MARGIN_SIZE,APPLICATION_WIDTH,GRAPH_MARGIN_SIZE));
		add(new GLine(0,APPLICATION_HEIGHT-GRAPH_MARGIN_SIZE-BOTTOM_BAR_HEIGHT,APPLICATION_WIDTH,APPLICATION_HEIGHT-GRAPH_MARGIN_SIZE-BOTTOM_BAR_HEIGHT));
		
		// add horizontal lines representing each decade
		for (int i = 1 ; i < 11 ; i ++ ) {
			add(new GLine(i*DECADE_WIDTH,0,i*DECADE_WIDTH,APPLICATION_HEIGHT));
		}
		
		// decade labels
		for (int i = 0 ; i < 11 ; i ++ ) {
			add(
					new GLabel(
						String.valueOf(((i*10)+1900)),
						(i)*DECADE_WIDTH,
						APPLICATION_HEIGHT-GRAPH_MARGIN_SIZE-BOTTOM_BAR_HEIGHT
						)
			);
		}
	
	}
	
	// iterates through all entries in the arraylist and calls the function to draw each one
	private void drawEntries() {
		for (int i = 0 ; i < entries.size() ; i++ ) {
			drawEntry(entries.get(i));
		}
	}
	
	// draws an individual graph for a name
	private void drawEntry(NameSurferEntry entry) {
		// get name
		String name = entry.getName();
		// choose color
		Color[] colors = {Color.BLACK, Color.RED, Color.BLUE, Color.MAGENTA};
		Color color = colors[ (entries.indexOf(entry)+1) % 4 ];
		// initialize last point
		GPoint last = new GPoint(0,0);
		// goes through the ranks and draws them
		for (int i = 0 ; i < 11 ; i++ ) {
			// get rank
			int rank = entry.getRankByIndex(i);
			// calculate x and y positions
			double x = APPLICATION_WIDTH * (i/11.0);
			double y = GRAPH_HEIGHT * rank/1000;
			
			// for debug
			double lx = last.getX();
			double ly = last.getY();
			
			// create point representing that
			GPoint current = new GPoint(x , y);
			String rankString = String.valueOf(rank);
			// no need to draw a line if it's the first point
			// otherwise, draw a line from the last to the current point
			if (i != 0) {
				GLine line = (new GLine(last.getX(), last.getY(), current.getX(), current.getY()));
				line.setColor(color);
				add(line);
			}
			// add label to each point
			GLabel label = new GLabel(name + rankString, current.getX(), current.getY());
			label.setColor(color);
			add(label);
			last = current;
			
		}
	}
	
	
	/* Implementation of the ComponentListener interface */
	public void componentHidden(ComponentEvent e) { }
	public void componentMoved(ComponentEvent e) { }
	public void componentResized(ComponentEvent e) { update(); }
	public void componentShown(ComponentEvent e) { }
	
	// instance vars
	private ArrayList<NameSurferEntry> entries = new ArrayList<NameSurferEntry>();
	
//	// rgen for colors
//	private RandomGenerator rgen = new RandomGenerator();
//	
	
}
