import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;

/*
 * File: NameSurferDataBase.java
 * -----------------------------
 * This class keeps track of the complete database of names.
 * The constructor reads in the database from a file, and
 * the only public method makes it possible to look up a
 * name and get back the corresponding NameSurferEntry.
 * Names are matched independent of case, so that "Eric"
 * and "ERIC" are the same names.
 */

public class NameSurferDataBase implements NameSurferConstants {
	
/* Constructor: NameSurferDataBase(filename) */
/**
 * Creates a new NameSurferDataBase and initializes it using the
 * data in the specified file.  The constructor throws an error
 * exception if the requested file does not exist or if an error
 * occurs as the file is being read.
 */
	public NameSurferDataBase(String filename) {
		
		// open file using try/catch block
		BufferedReader rd = null;
		try {
			rd = new BufferedReader(new FileReader("names-data.txt"));
		}
		catch (Exception e) {
			//
			System.out.println("error opening file");
		}
		// read lines using try catch block
		try {
			while (true) {
				String line = rd.readLine();
				if (line == null) break;
				// call NameSurferEntry class constructor to make new object from line
				NameSurferEntry entry = new NameSurferEntry(line);
				entries.
				
			}
		}
		catch (Exception e) {
			//
			System.out.println("error reading line");
		}
		
		// output the totals for each category
		for (int i = 0 ; i < scores.length - 1 ; i++ ) {
			println(10*i + "-" + (10*i+9) + ": " + scores[i]);
		}
		// output the last category
		println("100:   " + scores[scores.length - 1]);
		
	}
	
/* Method: findEntry(name) */
/**
 * Returns the NameSurferEntry associated with this name, if one
 * exists.  If the name does not appear in the database, this
 * method returns null.
 */
	public NameSurferEntry findEntry(String name) {
		// You need to turn this stub into a real implementation //
		return null;
	}
	
	private HashMap<String,int[]> entries = new HashMap<String,int[]>();
}

